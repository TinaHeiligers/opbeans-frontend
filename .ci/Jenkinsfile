#!/usr/bin/env groovy
@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    BASE_DIR = 'src/github.com/elastic'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GCS_CREDENTIALS = 'apm-ci-gcs-plugin'
    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
    PIPELINE_LOG_LEVEL = 'INFO'
    PATH = "${env.PATH}:${env.WORKSPACE}/bin"
    HOME = "${env.WORKSPACE}"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: BASE_DIR)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
    Build the project from code..
    */
    stage('Build') {
      steps {
        withGithubNotify(context: 'Build') {
          deleteDir()
          unstash 'source'
          dir(BASE_DIR){
            sh 'make build'
          }
        }
      }
    }
    /**
    Execute unit tests.
    */
    stage('Test') {
      steps {
        withGithubNotify(context: 'Test', tab: 'tests') {
          deleteDir()
          unstash 'source'
          dir(BASE_DIR){
            sh "make test"
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true,
            keepLongStdio: true,
            testResults: "${BASE_DIR}/**/junit-*.xml")
        }
      }
    }
    stage('Release') {
      agent { label 'linux && immutable' }
      when {
        branch 'master'
        beforeAgent true
      }
      steps {
        withGithubNotify(context: 'Release') {
          deleteDir()
          unstash 'source'
          dir(BASE_DIR){
            dockerLogin(secret: "${DOCKERHUB_SECRET}", registry: 'docker.io')
            sh "VERSION=latest make publish"
          }
        }
      }
    }
    stage('Downstream') {
      steps {
        script {
          ['apm-agent-dotnet/opbeans-dotnet-mbp/master',
           'apm-agent-go/opbeans-go-mbp/master',
           'apm-agent-java/opbeans-java-mbp/master',
           'apm-agent-nodejs/opbeans-node-mbp/master',
           'apm-agent-python/opbeans-python-mbp/master',
           'apm-agent-ruby/opbeans-ruby-mbp/master'].each { job ->
            build job: "${job}", propagate: false, wait: false
          }
        }
      }
    }
  }
  post {
    always {
      notifyBuildResult()
    }
  }
}
